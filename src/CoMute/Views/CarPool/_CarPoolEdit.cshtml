@model CoMute.Web.Models.CarPool

<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        @using (Ajax.BeginForm(new AjaxOptions
{
    HttpMethod = "POST",
    Url = Model.CarPoolID > 0 ? "/api/carpool/update" : "/api/carpool/create",
    OnComplete = "carpoolComplete",
    OnFailure = "carpoolComplete"

}))
        {
            @Html.HiddenFor(a => a.UserID)
            @Html.HiddenFor(a => a.CarPoolID)

            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@string.Format(Model.CarPoolID > 0 ? "Update carpool" : "Create new carpool")</h4>
                </div>

                <div class="modal-body">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="clearfix"></div>
                    @Html.LabelFor(model => model.departureTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.departureTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.departureTime, "", new { @class = "text-danger" })
                    </div>

                    <div class="clearfix"></div>
                    @Html.LabelFor(model => model.expectedArrivalTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.expectedArrivalTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.expectedArrivalTime, "", new { @class = "text-danger" })
                    </div>

                    <div class="clearfix"></div>
                    @Html.LabelFor(model => model.daysAvaiable, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.daysAvaiable, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.daysAvaiable, "", new { @class = "text-danger" })
                    </div>

                    <div class="clearfix"></div>
                    @Html.LabelFor(model => model.origin, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.origin, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.origin, "", new { @class = "text-danger" })
                    </div>

                    <div class="clearfix"></div>
                    @Html.LabelFor(model => model.destination, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.destination, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.destination, "", new { @class = "text-danger" })
                    </div>

                    <div class="clearfix"></div>
                    @Html.LabelFor(model => model.seatsAvailable, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.seatsAvailable, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.seatsAvailable, "", new { @class = "text-danger" })
                    </div>

                    <div class="clearfix"></div>
                    @Html.LabelFor(model => model.notes, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.notes, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.notes, "", new { @class = "text-danger" })
                    </div>
                    <div class="clearfix"></div>
                </div>

                <div class="modal-footer">
                    <br />
                    <input type="submit" value="@(Model.CarPoolID > 0 ? "Update" : "Create")" class="btn btn-default" />
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        }
    </div>
</div>
