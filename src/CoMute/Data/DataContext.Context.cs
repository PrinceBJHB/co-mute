//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoMute.Web.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Participant> Participants { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<CarPool> CarPools { get; set; }
    
        public virtual int CancelCarPool(Nullable<int> carPoolId, ObjectParameter output)
        {
            var carPoolIdParameter = carPoolId.HasValue ?
                new ObjectParameter("CarPoolId", carPoolId) :
                new ObjectParameter("CarPoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CancelCarPool", carPoolIdParameter, output);
        }
    
        public virtual int JoinCarPool(Nullable<int> userId, Nullable<int> carPoolId, Nullable<int> daysAvailable, ObjectParameter output)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var carPoolIdParameter = carPoolId.HasValue ?
                new ObjectParameter("CarPoolId", carPoolId) :
                new ObjectParameter("CarPoolId", typeof(int));
    
            var daysAvailableParameter = daysAvailable.HasValue ?
                new ObjectParameter("DaysAvailable", daysAvailable) :
                new ObjectParameter("DaysAvailable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JoinCarPool", userIdParameter, carPoolIdParameter, daysAvailableParameter, output);
        }
    
        public virtual int LeaveCarPool(Nullable<int> carPoolId, Nullable<int> userId, ObjectParameter output)
        {
            var carPoolIdParameter = carPoolId.HasValue ?
                new ObjectParameter("CarPoolId", carPoolId) :
                new ObjectParameter("CarPoolId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeaveCarPool", carPoolIdParameter, userIdParameter, output);
        }
    
        public virtual int RegisterUser(string name, string surname, string phone, string email, string password, ObjectParameter output)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterUser", nameParameter, surnameParameter, phoneParameter, emailParameter, passwordParameter, output);
        }
    
        public virtual ObjectResult<UserLogin_Result> UserLogin(string email, string password, ObjectParameter output)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserLogin_Result>("UserLogin", emailParameter, passwordParameter, output);
        }
    
        public virtual ObjectResult<GetUser_Result> GetUser(Nullable<int> id, ObjectParameter output)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUser_Result>("GetUser", idParameter, output);
        }
    
        public virtual int UpdatePassword(Nullable<int> id, string password, ObjectParameter output)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassword", idParameter, passwordParameter, output);
        }
    
        public virtual int UpdateProfile(Nullable<int> id, string name, string surname, string phone, string email, ObjectParameter output)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProfile", idParameter, nameParameter, surnameParameter, phoneParameter, emailParameter, output);
        }
    
        public virtual ObjectResult<GetHostedCarPools_Result> GetHostedCarPools(Nullable<int> hostUserId, ObjectParameter output)
        {
            var hostUserIdParameter = hostUserId.HasValue ?
                new ObjectParameter("HostUserId", hostUserId) :
                new ObjectParameter("HostUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHostedCarPools_Result>("GetHostedCarPools", hostUserIdParameter, output);
        }
    
        public virtual ObjectResult<GetJoinedCarPools_Result> GetJoinedCarPools(Nullable<int> userId, ObjectParameter output)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJoinedCarPools_Result>("GetJoinedCarPools", userIdParameter, output);
        }
    
        public virtual int CreateCarPool(Nullable<int> hostUserId, Nullable<System.TimeSpan> departure, Nullable<System.TimeSpan> arrival, string origin, Nullable<double> originLat, Nullable<double> originLon, string destination, Nullable<double> destinationLat, Nullable<double> destinationLon, Nullable<int> daysAvailable, Nullable<int> seats, string notes, ObjectParameter output)
        {
            var hostUserIdParameter = hostUserId.HasValue ?
                new ObjectParameter("HostUserId", hostUserId) :
                new ObjectParameter("HostUserId", typeof(int));
    
            var departureParameter = departure.HasValue ?
                new ObjectParameter("Departure", departure) :
                new ObjectParameter("Departure", typeof(System.TimeSpan));
    
            var arrivalParameter = arrival.HasValue ?
                new ObjectParameter("Arrival", arrival) :
                new ObjectParameter("Arrival", typeof(System.TimeSpan));
    
            var originParameter = origin != null ?
                new ObjectParameter("Origin", origin) :
                new ObjectParameter("Origin", typeof(string));
    
            var originLatParameter = originLat.HasValue ?
                new ObjectParameter("OriginLat", originLat) :
                new ObjectParameter("OriginLat", typeof(double));
    
            var originLonParameter = originLon.HasValue ?
                new ObjectParameter("OriginLon", originLon) :
                new ObjectParameter("OriginLon", typeof(double));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var destinationLatParameter = destinationLat.HasValue ?
                new ObjectParameter("DestinationLat", destinationLat) :
                new ObjectParameter("DestinationLat", typeof(double));
    
            var destinationLonParameter = destinationLon.HasValue ?
                new ObjectParameter("DestinationLon", destinationLon) :
                new ObjectParameter("DestinationLon", typeof(double));
    
            var daysAvailableParameter = daysAvailable.HasValue ?
                new ObjectParameter("DaysAvailable", daysAvailable) :
                new ObjectParameter("DaysAvailable", typeof(int));
    
            var seatsParameter = seats.HasValue ?
                new ObjectParameter("Seats", seats) :
                new ObjectParameter("Seats", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCarPool", hostUserIdParameter, departureParameter, arrivalParameter, originParameter, originLatParameter, originLonParameter, destinationParameter, destinationLatParameter, destinationLonParameter, daysAvailableParameter, seatsParameter, notesParameter, output);
        }
    
        public virtual ObjectResult<SearchCarPools_Result> SearchCarPools(Nullable<System.TimeSpan> depart, Nullable<System.TimeSpan> arrive, Nullable<double> originLat, Nullable<double> originLon, Nullable<double> destinationLat, Nullable<double> destinationLon, Nullable<int> daysAvailable, ObjectParameter output)
        {
            var departParameter = depart.HasValue ?
                new ObjectParameter("Depart", depart) :
                new ObjectParameter("Depart", typeof(System.TimeSpan));
    
            var arriveParameter = arrive.HasValue ?
                new ObjectParameter("Arrive", arrive) :
                new ObjectParameter("Arrive", typeof(System.TimeSpan));
    
            var originLatParameter = originLat.HasValue ?
                new ObjectParameter("OriginLat", originLat) :
                new ObjectParameter("OriginLat", typeof(double));
    
            var originLonParameter = originLon.HasValue ?
                new ObjectParameter("OriginLon", originLon) :
                new ObjectParameter("OriginLon", typeof(double));
    
            var destinationLatParameter = destinationLat.HasValue ?
                new ObjectParameter("DestinationLat", destinationLat) :
                new ObjectParameter("DestinationLat", typeof(double));
    
            var destinationLonParameter = destinationLon.HasValue ?
                new ObjectParameter("DestinationLon", destinationLon) :
                new ObjectParameter("DestinationLon", typeof(double));
    
            var daysAvailableParameter = daysAvailable.HasValue ?
                new ObjectParameter("DaysAvailable", daysAvailable) :
                new ObjectParameter("DaysAvailable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCarPools_Result>("SearchCarPools", departParameter, arriveParameter, originLatParameter, originLonParameter, destinationLatParameter, destinationLonParameter, daysAvailableParameter, output);
        }
    }
}
